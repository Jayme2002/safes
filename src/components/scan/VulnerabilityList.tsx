'use client';

import { useState } from 'react';
import { Vulnerability, VulnerabilitySeverity } from '@/types';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import VulnerabilityDetail from './VulnerabilityDetail';

interface VulnerabilityListProps {
  vulnerabilities: Vulnerability[];
}

export function getSeverityBadge(severity: VulnerabilitySeverity) {
  const severityClasses = {
    [VulnerabilitySeverity.LOW]: 'bg-blue-500/10 text-blue-500',
    [VulnerabilitySeverity.MEDIUM]: 'bg-yellow-500/10 text-yellow-500',
    [VulnerabilitySeverity.HIGH]: 'bg-orange-500/10 text-orange-500',
    [VulnerabilitySeverity.CRITICAL]: 'bg-red-500/10 text-red-500',
  };

  const severityText = {
    [VulnerabilitySeverity.LOW]: 'Low',
    [VulnerabilitySeverity.MEDIUM]: 'Medium',
    [VulnerabilitySeverity.HIGH]: 'High',
    [VulnerabilitySeverity.CRITICAL]: 'Critical',
  };

  return (
    <span
      className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
        severityClasses[severity]
      }`}
    >
      {severityText[severity]}
    </span>
  );
}

function VulnerabilityCard({ vulnerability, onClick }: { vulnerability: Vulnerability; onClick: () => void }) {
  const severityBadge = getSeverityBadge(vulnerability.severity);
  
  return (
    <div
      className="p-4 border rounded-lg mb-2 hover:bg-gray-50 cursor-pointer"
      onClick={onClick}
    >
      <div className="flex justify-between items-start">
        <div>
          <div className="flex items-center gap-2 mb-1">
            {severityBadge}
            <span className="text-sm font-medium text-gray-500">{vulnerability.type.replace(/_/g, ' ')}</span>
          </div>
          <div className="text-sm text-gray-700">{vulnerability.description}</div>
        </div>
        <div className="text-xs text-gray-500">{vulnerability.location}</div>
      </div>
    </div>
  );
}

export default function VulnerabilityList({ vulnerabilities }: VulnerabilityListProps) {
  const [selectedVulnerability, setSelectedVulnerability] = useState<Vulnerability | null>(null);

  return (
    <>
      <Card className="mt-6">
        <CardHeader>
          <CardTitle>Vulnerabilities</CardTitle>
          <CardDescription>
            {vulnerabilities.length} potential vulnerabilities found
          </CardDescription>
        </CardHeader>
        <CardContent>
          {vulnerabilities.length === 0 ? (
            <div className="p-4 text-center">
              <p className="text-green-500">Good job! No vulnerabilities were found in your website.</p>
            </div>
          ) : (
            <div className="space-y-2">
              {vulnerabilities.map((vulnerability) => (
                <VulnerabilityCard
                  key={vulnerability.id}
                  vulnerability={vulnerability}
                  onClick={() => setSelectedVulnerability(vulnerability)}
                />
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      <VulnerabilityDetail
        vulnerability={selectedVulnerability}
        isOpen={!!selectedVulnerability}
        onClose={() => setSelectedVulnerability(null)}
      />
    </>
  );
}
